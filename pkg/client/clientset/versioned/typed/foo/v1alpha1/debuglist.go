/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/indradhanush/debug-operator/pkg/apis/foo/v1alpha1"
	scheme "github.com/indradhanush/debug-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// DebugListsGetter has a method to return a DebugListInterface.
// A group's client should implement this interface.
type DebugListsGetter interface {
	DebugLists() DebugListInterface
}

// DebugListInterface has methods to work with DebugList resources.
type DebugListInterface interface {
	Create(*v1alpha1.DebugList) (*v1alpha1.DebugList, error)
	Update(*v1alpha1.DebugList) (*v1alpha1.DebugList, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.DebugList, error)
	List(opts v1.ListOptions) (*v1alpha1.DebugListList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.DebugList, err error)
	DebugListExpansion
}

// debugLists implements DebugListInterface
type debugLists struct {
	client rest.Interface
}

// newDebugLists returns a DebugLists
func newDebugLists(c *FooV1alpha1Client) *debugLists {
	return &debugLists{
		client: c.RESTClient(),
	}
}

// Get takes name of the debugList, and returns the corresponding debugList object, and an error if there is any.
func (c *debugLists) Get(name string, options v1.GetOptions) (result *v1alpha1.DebugList, err error) {
	result = &v1alpha1.DebugList{}
	err = c.client.Get().
		Resource("debuglists").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of DebugLists that match those selectors.
func (c *debugLists) List(opts v1.ListOptions) (result *v1alpha1.DebugListList, err error) {
	result = &v1alpha1.DebugListList{}
	err = c.client.Get().
		Resource("debuglists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested debugLists.
func (c *debugLists) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("debuglists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a debugList and creates it.  Returns the server's representation of the debugList, and an error, if there is any.
func (c *debugLists) Create(debugList *v1alpha1.DebugList) (result *v1alpha1.DebugList, err error) {
	result = &v1alpha1.DebugList{}
	err = c.client.Post().
		Resource("debuglists").
		Body(debugList).
		Do().
		Into(result)
	return
}

// Update takes the representation of a debugList and updates it. Returns the server's representation of the debugList, and an error, if there is any.
func (c *debugLists) Update(debugList *v1alpha1.DebugList) (result *v1alpha1.DebugList, err error) {
	result = &v1alpha1.DebugList{}
	err = c.client.Put().
		Resource("debuglists").
		Name(debugList.Name).
		Body(debugList).
		Do().
		Into(result)
	return
}

// Delete takes name of the debugList and deletes it. Returns an error if one occurs.
func (c *debugLists) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("debuglists").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *debugLists) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("debuglists").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched debugList.
func (c *debugLists) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.DebugList, err error) {
	result = &v1alpha1.DebugList{}
	err = c.client.Patch(pt).
		Resource("debuglists").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
